# -*- coding: utf-8 -*-
"""agentTask_Faisal.ipynb
Automatically generated by Colab.
Original file is located at
    https://colab.research.google.com/drive/19tDPFGy2MKXL6h-266htvbVj6nwYOqDh
"""

!pip install beautifulsoup4 requests
!pip install -qU  langchain-core==0.2.9
!pip install -qU langchain-community==0.2.5
!pip install -qU  'crewai[tools]'==0.32.0
!pip install -qU langchain-groq==0.1.5
import requests
from bs4 import BeautifulSoup

url = 'https://www.psx.com.pk/'
response = requests.get(url)
soup = BeautifulSoup(response.content, 'html.parser')
table_data = soup.find('div', class_='table-responsive MarketOverview')
header = [tag.text for tag in table_data.find_all('th')]
row_data =[[tag.text for tag in row.find_all('td')] for row in table_data.find_all('tr')[1:]]

import pandas as pd
df = pd.DataFrame(row_data, columns=header)
print(df)

import os
import sqlite3
import pandas as pd
from langchain.chat_models import ChatOpenAI
from langchain_community.agent_toolkits import create_sql_agent
from langchain_community.utilities.sql_database import SQLDatabase

connection = sqlite3.connect("stockData.db")
df.to_sql(name="stock", con=connection)
db = SQLDatabase.from_uri("sqlite:///stockData.db")

import json
from pathlib import Path
from textwrap import dedent
from crewai_tools import tool
from google.colab import userdata
from langchain_groq import ChatGroq
from datetime import datetime, timezone
from langchain.schema import AgentFinish
from dataclasses import asdict, dataclass
from crewai import Agent, Crew, Process, Task
from langchain.schema.output import LLMResult
from typing import Any, Dict, List, Tuple, Union
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.callbacks.base import BaseCallbackHandler
from langchain_community.tools.sql_database.tool import (
    InfoSQLDatabaseTool,
    ListSQLDatabaseTool,
    QuerySQLCheckerTool,
    QuerySQLDataBaseTool,
)

@dataclass
class Event:
    event: str
    timestamp: str
    text: str

def _current_time() -> str:
    return datetime.now(timezone.utc).isoformat()

class LLMCallbackHandler(BaseCallbackHandler):
    def __init__(self, log_path: Path):
        self.log_path = log_path

    def on_llm_start(
        self, serialized: Dict[str, Any], prompts: List[str], **kwargs: Any
    ) -> Any:
        """Run when LLM starts running."""
        assert len(prompts) == 1
        event = Event(event="llm_start", timestamp=_current_time(), text=prompts[0])
        with self.log_path.open("a", encoding="utf-8") as file:
            file.write(json.dumps(asdict(event)) + "\n")

    def on_llm_end(self, response: LLMResult, **kwargs: Any) -> Any:
        """Run when LLM ends running."""
        generation = response.generations[-1][-1].message.content
        event = Event(event="llm_end", timestamp=_current_time(), text=generation)
        with self.log_path.open("a", encoding="utf-8") as file:
            file.write(json.dumps(asdict(event)) + "\n")

llm = ChatGroq(
    temperature=0,
    model_name="llama3-70b-8192",
    #model_name="mixtral-8x7b-32768",
    callbacks=[LLMCallbackHandler(Path("prompts.jsonl"))],
)

agent_executor = create_sql_agent(llm, db=db,handle_parsing_errors=True, verbose=True)
result=agent_executor.invoke({"input": "which 3 companies are going on profit?"})
print(result['output'])

result=agent_executor.invoke({"input": "use column volume to find the desired answere"})
print(result['output'])

result=agent_executor.invoke({"input": "base on column volume, find top 3 companies"})
print(result['output'])

"""# **Create Tools**"""
"""
### **Tool 1: List all the tables in the Database**
"""
@tool("list_tables")
def list_tables() -> str:
    """List the available tables in the database"""
    return ListSQLDatabaseTool(db=db).invoke("")

list_tables.run()

"""### **Tool 2 : Return the schema and sample rows for a given list of tables**"""
@tool("tables_schema")
def tables_schema(tables: str) -> str:
    """
    Input is a comma-separated list of tables, output is the schema and sample rows
    for those tables. Be sure that the tables actually exist by calling `list_tables` first!
    Example Input: table1, table2, table3
    """
    tool = InfoSQLDatabaseTool(db=db)
    return tool.invoke(tables)

print(tables_schema.run("stock"))

"""### **Tool 3: Executes a given SQL query**"""
@tool("execute_sql")
def execute_sql(sql_query: str) -> str:
    """Execute a SQL query against the database. Returns the result"""
    return QuerySQLDataBaseTool(db=db).invoke(sql_query)

execute_sql.run("SELECT * FROM stock")

"""### **Tool 4 : checks the SQL query before executing it**"""
@tool("check_sql")
def check_sql(sql_query: str) -> str:
    """
    Use this tool to double check if your query is correct before executing it. Always use this
    tool before executing a query with `execute_sql`.
    """
    return QuerySQLCheckerTool(db=db, llm=llm).invoke({"query": sql_query})

check_sql.run("SELECT * FROM finance")

"""# **Create Agents**"""
"""
### **Agent 1 : Database Developer Agent will construct and execute SQL queries**
"""
sql_dev = Agent(
    role="Senior Database Developer",
    goal="Construct and execute SQL queries based on a request",
    backstory=dedent(
        """
        You are an experienced database engineer who is master at creating efficient and complex SQL queries.
        You have a deep understanding of how different databases work and how to optimize queries.
        Use the `list_tables` to find available tables.
        Use the `tables_schema` to understand the metadata for the tables.
        Use the `execute_sql` to check your queries for correctness.
        Use the `check_sql` to execute queries against the database.
    """
    ),
    llm=llm,
    tools=[list_tables, tables_schema, execute_sql, check_sql],
    allow_delegation=False,
)

"""### **Agent 2 : Data Analyst Agent will analyze the database data response and write a detailed response**"""
data_analyst = Agent(
    role="Senior Data Analyst",
    goal="You receive data from the database developer and analyze it",
    backstory=dedent(
        """
        You have deep experience with analyzing datasets using Python.
        Your work is always based on the provided data and is clear,
        easy-to-understand and to the point. You have attention
        to detail and always produce very detailed work (as long as you need).
    """
    ),
    llm=llm,
    allow_delegation=False,
)

"""### **Agent 3 : Report Editor Agent will write an executive summary based on the analysis**"""
report_writer = Agent(
    role="Senior Report Editor",
    goal="Write an executive summary type of report based on the work of the analyst",
    backstory=dedent(
        """
        Your writing still is well known for clear and effective communication.
        You always summarize long texts into bullet points that contain the most
        important details.
        """
    ),
    llm=llm,
    allow_delegation=False,
)

"""#**Create Tasks**"""
"""
### **Task 1 : extract the data required for the user query**
"""
extract_data = Task(
    description="Extract data that is required for the query {query}.",
    expected_output="Database result for the query",
    agent=sql_dev,
)

"""### **Task 2 : Analyze the data from the database and write an analysis**"""
analyze_data = Task(
    description="Analyze the data from the database and write an analysis for {query}.",
    expected_output="Detailed analysis text",
    agent=data_analyst,
    context=[extract_data],
)

"""### **Task 3 : write an executive summary of the report from the analysis**"""
write_report = Task(
    description=dedent(
        """
        Write an executive summary of the report from the analysis. The report
        must be less than 100 words.
    """
    ),
    expected_output="Markdown report",
    agent=report_writer,
    context=[analyze_data],
)

"""# **Setup The Crew**"""
crew = Crew(
    agents=[sql_dev, data_analyst, report_writer],
    tasks=[extract_data, analyze_data, write_report],
    process=Process.sequential,
    verbose=2,
    memory=False,
    output_log_file="crew.log",
)

"""### **Kickoff the Crew for Query**"""
inputs = {
    "query": "which company is going on loss"
}
result = crew.kickoff(inputs=inputs)

inputs = {
    "query": "which company is going on profit"
}
result = crew.kickoff(inputs=inputs)
